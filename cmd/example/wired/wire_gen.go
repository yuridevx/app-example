// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wired

import (
	"github.com/yuridevx/app"
	"github.com/yuridevx/app-example/internal/config"
	"github.com/yuridevx/app-example/internal/domain"
	"github.com/yuridevx/app-example/internal/infra"
	"github.com/yuridevx/app-example/internal/logic/runner"
	"github.com/yuridevx/app-example/internal/logic/schedule"
	"github.com/yuridevx/app-example/internal/logic/server"
	"go.uber.org/zap"
)

// Injectors from app.go:

func InitApp() (*App, error) {
	logger := infra.NewLogger()
	configConfig := config.NewConfig()
	relic := &configConfig.Relic
	application := infra.NewRelic(relic, logger)
	pyroscope := &configConfig.Pyroscope
	profiler := infra.NewPyroscope(logger, pyroscope)
	builder := infra.NewApp(logger, application, profiler)
	health := infra.NewHealth()
	clock := infra.NewClock(configConfig)
	runnerRunner := runner.NewRunner()
	controller := schedule.NewController(builder, clock, runnerRunner)
	grpc := server.NewGrpc(configConfig, builder, application, controller)
	gateway := server.NewGateway(controller, configConfig, application, builder)
	app := &App{
		Builder: builder,
		Logger:  logger,
		Health:  health,
		Grpc:    grpc,
		Gateway: gateway,
	}
	return app, nil
}

// app.go:

type App struct {
	Builder app.Builder
	Logger  *zap.Logger
	Health  domain.HealthService
	// Commenting following field will prevent component from running
	Grpc    *server.Grpc
	Gateway *server.Gateway
}
